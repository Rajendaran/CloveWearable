package com.clovewearable.cove.controller;

import org.json.JSONException;
import org.json.JSONObject;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.clovewearable.cove.constants.ICoveConstant;
import com.clovewearable.cove.exception.OpenWeatherMapCustomException;
import com.clovewearable.cove.model.Temperature;
import com.clovewearable.cove.service.impl.OpenWeatherMapService;
import com.clovewearable.cove.util.OpenWeatherMapUtil;

/**
 * @author Rajendaran
 *
 */

@RestController
@RequestMapping(value = "/openweathermap")
public class OpenWeatherMapController {
	
	private static final org.slf4j.Logger logger = LoggerFactory.getLogger(OpenWeatherMapController.class);
	
	@Autowired
	OpenWeatherMapUtil openWeatherMapUtil;
	
	@Autowired
	OpenWeatherMapService openWeatherMapService;
	
	@SuppressWarnings("unused")
	@RequestMapping(value = "/getTemperatureByPincode")
	public ResponseEntity<String> getTemperatureByPincode(@RequestParam("pincode") String pincode,
			@RequestParam("country") String country) throws OpenWeatherMapCustomException {
		logger.info(ICoveConstant.BEGINS_OWM_CONTROLLER_GETTEMPBYPINCODE_METHOD);
		String owpPincodeUrl = ICoveConstant.OPENWEATHERMAP_URL_BY_PINCODE+pincode+","+country+ICoveConstant.OPENWEATHERMAP_API_KEY1;
		Double temp = null;
		JSONObject weatherByPincodeObj = openWeatherMapUtil.getOpenWeatherMapData(owpPincodeUrl);
		try {
			JSONObject tempratureObj = weatherByPincodeObj.getJSONObject("main");
			temp = tempratureObj.getDouble("temp");
		} catch (JSONException e) {
			logger.error(ICoveConstant.ERROR_WHILE_PARSING_JSON_DATA + "\n" + e.getMessage());
		}
				
		Temperature temperature = new Temperature();
		temperature.setPincode(pincode);
		temperature.setCurrentTemp(temp);
		Double currentTemp = openWeatherMapService.getTemperatureByPincode(temperature);
		return new ResponseEntity<String>(ICoveConstant.CURRENT_TEMP + currentTemp, HttpStatus.OK);
	}

}
